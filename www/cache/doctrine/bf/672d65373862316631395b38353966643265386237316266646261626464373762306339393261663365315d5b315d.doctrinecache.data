1487175110
a:2:{s:7:"content";s:2779:"<p>Quoi de neuf pour Java 7? Qu'apporte cette nouvelle version par rapport à la 6?
Opérateur Diamand, switch de string, etc. Voici tout ce qu'il faut savoir.</p>
<p>===</p>
<h3>Informations</h3>
<table>
<thead>
<tr>
<th>Date de sortie</th>
</tr>
</thead>
<tbody>
<tr>
<td>2011</td>
</tr>
</tbody>
</table>
<h3>I. Les nouveautés de JAVA 7.0</h3>
<p>Les switchs sur les strings : </p>
<pre><code>public static void main(String args[]) {
    switch (args[0]) {
        case "start":
            MyApplication.start();
            break;
        case "stop":
            MyApplication.stop();
            break;
        default:
            System.err.println("Custom error message ...");
            break;
    }
}</code></pre>
<p>L'interface Future permet d'effectuer des traitements asynchrones (cf <a href="#liens">Les Liens Utiles</a>)</p>
<p>La possibilité d'utiliser des catchs multiples :</p>
<pre><code>try {
    ...
} catch (IllegalStateException | SQLException e) {
    throw new RuntimeException(e);
}</code></pre>
<p>La propagation des sous types des exceptions. Par exemple, catpure une <em>Exception</em> et throws une <em>SQLException</em> :</p>
<pre><code>private void traitement() throws SQLException, IOException {
    ...
}

public void toto() throws SQLException, IOException {
    try {
        taitement();
    } catch (Exception e) {
        //TODO ...
        throw e;
    }
}</code></pre>
<p>Les opérateurs <em>diamond</em>, pas la peine de répéter les types :</p>
<pre><code>private List&lt;String&gt; list = new ArrayList&lt;&gt;;</code></pre>
<p>L’instruction “try-with-resource” de Java 7 permet de gérer automatiquement la fermeture des ressources (readers, writers, sockets, connexions …). Adieu le bloc “finally” et surtout adieu les bugs liés aux oublis d’appels de la méthode “close()” :</p>
<pre><code>public static void main(String args[]) {&lt;/span&gt;
    String filepath = "src/demo/trywithresource/mytext.txt";

    try (BufferedReader reader = new BufferedReader(new FileReader(filepath))) {
        String line = reader.readLine();
        while (line != null) {
            System.out.println(line);
            line = reader.readLine();
        }
    } catch (IOException e) {
        System.err.println("Erreur : " + e.getMessage());
    }
}</code></pre>
<div class="notices red">
<p>le “try-with-resource” fonctionne avec les classes implémentant l’interface “java.lang.AutoClosable”.</p>
</div>
<h3>II. Lien utiles <a id="liens"></a></h3>
<ul>
<li>
<p><a href="http://blog.sebprunier.com/code/java-7-les-nouveautes-dans-le-langage/">http://blog.sebprunier.com/</a></p>
</li>
<li><a href="https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Future.html">Future interface</a></li>
</ul>";s:12:"content_meta";N;}