1487263710
a:2:{s:7:"content";s:3722:"<p>Après SVN, voici GIT un gestionnaire de versions simple et efficace.</p>
<p>===</p>
<h1><img src="http://www.mimastech.com/wp-content/uploads/2016/10/git.png" alt="GIT" /> GIT : Comment ca fonctionne?</h1>
<h3>I. Présentation de Git</h3>
<table>
<thead>
<tr>
<th>Informations</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>Créateur</td>
<td><a href="https://fr.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a></td>
</tr>
<tr>
<td>Première version</td>
<td>7 Avril 2005</td>
</tr>
</tbody>
</table>
<div class="notices blue">
<p>Git est un logiciel de gestion de versions décentralisé. C'est un logiciel libre et distribué selon les termes de la licence publique générale GNU version 2. En 2016, il s’agit du logiciel de gestion de versions le plus populaire qui est utilisé par plus de douze millions de personnes.</p>
</div>
<h3>II. Commandes utiles</h3>
<ul>
<li><em>git init</em>: Initialise un dépôt GIT (ajout de .git).</li>
<li><em>git status</em> : Liste des modifications.</li>
<li><em>git add 'XXX'</em> : Ajout l'élément XXX au contrôle de version.</li>
<li><em>git add -A</em> : Ajout tous les éléments au contrôle de version.</li>
<li><em>git commit</em> -m "message" : Commit vers le dépôt local avec le messsage associé.</li>
<li><em>git log -p</em> : affiche l'historique des commits. l'option '-p' regroupe par commit</li>
<li><em>git remote add origin 'url'</em>: Ajout d'un dépôt distant. </li>
<li><em>git push -u origin master</em> : Pousse les modifications sur le dépôt distant "origin" sur la branche par défaut "master".</li>
<li><em>git pull origin master</em> : Récupère les modifications sur le dépôt distant "origin" sur la branche par défaut "master".</li>
<li><em>git diff HEAD</em> : liste les modifications par rapport au dernier commit.</li>
<li><em>git diff --staged</em> : liste les modifications indexées.</li>
<li><em>git reset 'XXX'</em> : Annule les modifications sur XXX.</li>
<li><em>git checkout -- 'XXX'</em> : Revert du fichier XXX.</li>
<li><em>git branch 'BBBB'</em> : Création d'une branche BBBB.</li>
<li><em>git branch -d 'BBBB'</em> : Suppression de la branche BBBB.</li>
<li><em>git checkout 'BBBB'</em> : Bascule sur la branche BBBB.</li>
<li><em>git rm '*.txt'</em> : supprime les fichiers et le status GIT associé.</li>
<li><em>git merge 'BBBB'</em> : Fusionne la branche BBBB sur la branche courante.</li>
<li><em>git clone 'url'</em> : Clone le dépôt.</li>
<li><em>git mv 'origine' 'cible'</em> : Renomme un fichier. </li>
<li><em> git fetch 'BBBB'</em> : Comme le pull mais en gérant les conflits.</li>
</ul>
<p>Voici quelques commandes utiles pour la configuration : </p>
<pre><code>git config http.sslVerify false</code></pre>
<h3>III. Ignorer certains fichiers</h3>
<p>le fichier <strong>.gitignore</strong> permet d'ajouter les patterns ignorés par GIT. Voici un exemple de fichier :</p>
<pre><code># un commentaire, cette ligne est ignorée
# pas de fichier .a
*.a
# mais suivre lib.a malgré la règle précédente
!lib.a
# ignorer uniquement le fichier TODO à la racine du projet
/TODO
# ignorer tous les fichiers dans le répertoire build
build/
# ignorer doc/notes.txt, mais pas doc/server/arch.txt
doc/*.txt
# ignorer tous les fichiers .txt sous le répertoire doc/
doc/**/*.txt    </code></pre>
<h3>IV. Configuration globale</h3>
<p>Le fichier .gitconfig contient la configuration globale de GIT.</p>
<p>Par exemple, pour définir l'utilisateur globale :</p>
<pre><code>[User]
    name=Anthony
    email=antho.normand@gmail.com</code></pre>
<h3>Tutorial</h3>
<div class="notices yellow">
<p>Pour bien comprendre les commandes GIT, utiliser le tutorial <a href="https://try.github.io">TryGIT</a></p>
</div>";s:12:"content_meta";N;}